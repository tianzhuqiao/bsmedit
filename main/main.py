"""Subclass of mainFrame, which is generated by wxFormBuilder."""

import os
import imp
import importlib
import wx
import wx.lib.agw.aui as aui
import bsm_dlg_helper
from bsmshell import bsmShell, HistoryPanel, StackPanel
from bsmhelp import HelpPanel
from datetime import date
import DirTreeCtrl
from debuggerxpm import *
from dirpanelxpm import *
from mainframexpm import *
from version import *

# Implementing mainFrame
intro = 'Welcome To BSMEdit 3\n' \
        'PyCrust %s - The Flakiest Python Shell' \
          % wx.py.version.VERSION

# Define File Drop Target class
class FileDropTarget(wx.FileDropTarget):
    def __init__(self):
        wx.FileDropTarget.__init__(self)

    def OnDropFiles(self, x, y, filenames):
        for file in filenames:
            wx.py.dispatcher.send(signal='bsm.editor.openfile',
                                  filename=file)

class bsmMainFrame(bsm_dlg_helper.mainFrame):

    ID_VM_RENAME = wx.NewId()
    def __init__(self, parent):
        bsm_dlg_helper.mainFrame.__init__(self, parent)
        #self.menuSave.SetBitmap(wx.BitmapFromXPMData(save_sim_xpm))
        #self.menuProperties.SetBitmap(wx.BitmapFromXPMData(setting_xpm))
        #self.menuMagPlugins.SetBitmap(wx.BitmapFromXPMData( plugin_xpm))
        self.menuAbout.SetBitmap(wx.BitmapFromXPMData(about_xpm))
        
        self.SetMinSize((640, 480))
        self._mgr.SetAGWFlags(self._mgr.GetAGWFlags()
                              | aui.AUI_MGR_ALLOW_ACTIVE_PANE
                              | aui.AUI_MGR_SMOOTH_DOCKING
                              | aui.AUI_MGR_USE_NATIVE_MINIFRAMES
                              | aui.AUI_MGR_LIVE_RESIZE)
        # set mainframe icon
        icon = wx.EmptyIcon()
        icon.CopyFromBitmap(wx.BitmapFromXPMData(bsmedit_xpm))
        self.SetIcon(icon)

        # status bar
        self.statusbar = wx.StatusBar(self)
        self.SetStatusBar(self.statusbar)
        self.statusbar_width = [-1]
        self.statusbar.SetStatusWidths(self.statusbar_width)

        # recent file list
        self.filehistory = wx.FileHistory(8)
        self.config = wx.FileConfig('bsmedit', style=wx.CONFIG_USE_LOCAL_FILE)
        self.config.SetPath('/FileHistory')
        self.filehistory.Load(self.config)
        self.filehistory.UseMenu(self.menuRecentFiles)
        self.filehistory.AddFilesToMenu()
        self.Bind(wx.EVT_MENU_RANGE, self.onMenuFileHistory, id=wx.ID_FILE1, id2=wx.ID_FILE9)

        # shell panel
        ns = {}
        ns['wx'] = wx
        ns['app'] = wx.GetApp()
        ns['frame'] = self
        self.panelShell = bsmShell(self, 1, introText=intro, locals=ns)
        self._mgr.AddPane(self.panelShell,
                          aui.AuiPaneInfo().Name('shell').Caption('Console')
                          .CenterPane().CloseButton(False).Layer(1)
                          .Position(1).MinimizeButton(True).MaximizeButton(True))

        # history panel
        self.panelHistory = HistoryPanel(self)
        self.addPanel(self.panelHistory, title="History",
                      #paneInfo=aui.AuiPaneInfo().Name('history')
                      #.Caption('History').BestSize((300, 300)).Right()
                      #.CloseButton(True).Layer(1).Position(1)
                      #.MinimizeButton(True).MaximizeButton(True).DestroyOnClose(False),
                      showhidemenu='View:Panels:Command History')
        # help panel
        self.panelHelp = HelpPanel(self, self.panelShell.interp.locals)
        self.addPanel(self.panelHelp, title="Help",
                      #paneInfo=aui.AuiPaneInfo().Name('help')
                      #.Caption('Help').BestSize((300, 300)).Right()
                      #.CloseButton(True).Layer(1).Position(1)
                      #.MinimizeButton(True).MaximizeButton(True).DestroyOnClose(False),
                      target=self.panelHistory,
                      showhidemenu='View:Panels:Command Help')
        # debug stack panel
        self.panelStack = StackPanel(self)
        self.addPanel(self.panelStack, title = "Call Stack",
                      #paneInfo=aui.AuiPaneInfo().Name('callstack')
                      #.Caption('Call Stack').BestSize((300, 300)).Right()
                      #.CloseButton(True).Layer(1).Position(1)
                      #.MinimizeButton(True).MaximizeButton(True).DestroyOnClose(False),
                      target=self.panelHistory,
                      showhidemenu='View:Panels:Call Stack')
        # directory panel
        self.panelDir = DirPanel(self)
        self.addPanel(self.panelDir, title = "Browsing",
                      #paneInfo=aui.AuiPaneInfo().Name('browsing')
                      #.Caption('Browsing').BestSize((300, 300)).Right()
                      #.CloseButton(True).Layer(1).Position(1)
                      #.MinimizeButton(True).MaximizeButton(True).DestroyOnClose(False),
                      target=self.panelHistory,
                      showhidemenu='View:Panels:Browsing')

        self.initDebugger()
        self._mgr.Update()

        self.Bind(aui.EVT_AUI_PANE_ACTIVATED, self.OnPaneActivated)
        wx.py.dispatcher.connect(receiver=self.run_command, signal='frame.run')
        wx.py.dispatcher.connect(receiver=self.set_pane_title, signal='frame.updatepanetitle')
        wx.py.dispatcher.connect(receiver=self.activate_pane, signal='frame.activatingpane')
        wx.py.dispatcher.connect(receiver=self.set_status_text, signal='frame.setstatustext')
        wx.py.dispatcher.connect(receiver=self.file_history, signal='frame.filehistory')
        self.Bind(wx.EVT_CLOSE, self._onClose)
        try:
            import sys
            sys.path.append('.')
            import init_bsm
        except:
            pass
        #try:
        self.addon = {}
        self.panelShell.historyOn(False)
        bsmpackages = self.package_contents('bsm')
        for pkg in bsmpackages:
            mod = importlib.import_module('bsm.%s' % pkg)
            if hasattr(mod, 'bsm_Initialize'):
                mod.bsm_Initialize(self)
                self.addon[pkg] = True
        self.panelShell.historyOn(True)
        #except:
        #    print 'Initializing addon failed'
        #    pass

        self.panelShell.historyOn(True)

        # Create a File Drop Target object
        dt = FileDropTarget()

        # Link the Drop Target Object to the Text Control
        self.SetDropTarget(dt)

        wx.py.dispatcher.send(signal='frame.loadconfig', config = self.config)

        self.perspective = {}
        #self.LoadPerspective()
        self.panelShell.SetFocus()

        self.Bind(aui.EVT_AUINOTEBOOK_TAB_RIGHT_UP, self.OnNoteBookTabRightUp)
        self.Bind(aui.EVT_AUI_PANE_CLOSE, self.OnPaneClose)
        self.Bind(aui.EVT_AUINOTEBOOK_PAGE_CLOSE, self.OnPaneClose)
        self.Bind(wx.EVT_MENU, self.OnProcessCommand, id = self.ID_VM_RENAME)
    
    def file_history(self, filename):
        self.config.SetPath('/FileHistory')
        self.filehistory.AddFileToHistory(filename)
        self.filehistory.Save(self.config)
        self.config.Flush()

    def OnPaneClose(self, evt):
        if not evt.pane.IsDestroyOnClose():
            evt.Veto()
            if evt.pane.IsNotebookPage():
                notebook = self._mgr._notebooks[evt.pane.notebook_id]
                id = notebook.GetPageIndex(evt.pane.window)
                notebook.RemovePage(id)
                evt.pane.Dock()
                evt.pane.Hide()
                evt.pane.window.Reparent(self._mgr._frame)
                evt.pane.window.notebook = notebook
                evt.pane.Top()
                self._mgr.Update()
            self._mgr.ShowPane(evt.pane.window, False)
            self._mgr.Update()
    def OnNoteBookTabRightUp(self, evt):
        idx = evt.GetSelection() # this is the index inside the current tab control
        tabctrl = evt.GetEventObject()
        tabctrl.SetSelection(idx)
        self.m_activeTabCtrl = tabctrl
        self.m_activeTabCtrlIndex = idx
        menu = wx.Menu()
        menu.Append(self.ID_VM_RENAME, "&Rename")
        self.PopupMenu(menu)
    def OnProcessCommand(self, evt):
        if not self.m_activeTabCtrl:
            return
        id = evt.GetId()
        tabCtrl = self.m_activeTabCtrl
        page = self.m_activeTabCtrl.GetPage(self.m_activeTabCtrlIndex)
        if id == self.ID_VM_RENAME:
            pane = self._mgr.GetPane(page)
            strNameIn = pane.caption
            strNameIn = wx.GetTextFromUser("Type in the name:", "Input Name", 
                                                               strNameIn, self)
            if strNameIn:
                pane.Caption(strNameIn)
                page.SetLabel(strNameIn)
                self._mgr.Update()

        self.m_activeTabCtrl = None
        self.m_activeTabCtrlIndex = -1
    def LoadPerspective(self):
        for key in self.perspective:
            path = "View:Layout:%s"%self.perspective[key]["key"]
            wx.py.dispatcher.send(signal='frame.delmenu', path=path, id=key)
        self.perspective = {}
        self.config.SetPath('/Perspective')
        more, key, index = self.config.GetFirstEntry()
        while more:
            value = self.config.Read(key)
            response = wx.py.dispatcher.send(signal='frame.addmenu',
                    path='View:Layout:%s'%key, rxsignal='frame.perspective')
            if response:
                self.perspective[response[0][1]] = {"key": key, "value":value} 
            more, key, index = self.config.GetNextEntry(index)
        wx.py.dispatcher.connect(self.OnSetPerspective, signal='frame.perspective')

    def OnSetPerspective(self, command):
        layout = self.perspective.get(command, "")
        if layout:
            self._mgr.LoadPerspective(layout["value"])

    def _onClose(self, evt):
        # stop the debugger if it is on
        if self.panelShell.IsDebuggerOn():
            wx.py.dispatcher.send(signal='debugger.end')
        wx.py.dispatcher.send(signal='frame.saveconfig', config = self.config)
        wx.py.dispatcher.send(signal='frame.exit')
        evt.Skip()

    def set_status_text(self, text,index=0,width=-1):
        if index>=len(self.statusbar_width):
            self.statusbar_width.extend([0 for i in range(index+1-len(self.statusbar_width))])
            self.statusbar.SetFieldsCount(index+1)
        if self.statusbar_width[index]!=width:
            self.statusbar_width[index]=width            
            self.statusbar.SetStatusWidths(self.statusbar_width)
        self.statusbar.SetStatusText(text,index)

    def package_contents(self, package_name):
        MODULE_EXTENSIONS = ('.py', '.pyc', '.pyo')
        (file, pathname, description) = imp.find_module(package_name)
        if file:
            raise ImportError('Not a package: %r', package_name)

        # Use a set because some may be both source and compiled.
        return set([os.path.splitext(module)[0] for module in
                   os.listdir(pathname)
                   if module.endswith(MODULE_EXTENSIONS)])

    def run_command(self, command, prompt=True, verbose=True, debug=False):
        if debug and not self.tbDebug.IsShown(): 
            self.showPanel(self.tbDebug)
        self.panelShell.runCommand(command, prompt, verbose, debug)

    def OnPaneActivated(self, event):
        pane = event.GetPane()
        wx.py.dispatcher.send(signal='frame.activatepane', pane=pane)
        if isinstance(pane, aui.auibook.AuiNotebook):
            window = pane.GetCurrentPage()
            if window:
                wx.py.dispatcher.send(signal='frame.activatepane', pane=window)

    def activate_pane(self, pane):
        if pane:
            info = self._mgr.GetPane(pane)
            if info and info.IsOk() and pane.IsShown() == False:
                self._mgr.ShowPane(pane, True)

    def set_pane_title(self, pane, title):
        if pane:
            info = self._mgr.GetPane(pane)
            if info and info.IsOk() and info.caption != title:
                info.Caption(title)
                self._mgr.RefreshPaneCaption(pane)

    # Handlers for mainFrame events.
    def OnClose(self, event):
        self.Destroy()

    def OnFileLoadProject(self, event):
        pass

    def OnFileCloseProject(self, event):
        pass

    def OnFileSaveProject(self, event):
        pass

    def OnFileSaveProjectAs(self, event):
        pass

    def OnFileQuit(self, event):
        self.Close(True)

    def OnViewSaveLayout(self, event):
        self.config.SetPath('/Perspective')
        layout = self._mgr.SavePerspective()
        dlg = wx.TextEntryDialog(self, "Perspective label")
        if dlg.ShowModal() == wx.ID_OK:
            label = dlg.GetValue()
            self.config.Write(label, layout)
        dlg.Destroy()
        self.LoadPerspective()

    def OnViewDeleteLayout(self, event):
        layout = []
        for k in self.perspective:
            layout.append(str(self.perspective[k]["key"]))
        dlg = wx.SingleChoiceDialog(
                self, 'Delete layout', '', layout, wx.CHOICEDLG_STYLE)

        if dlg.ShowModal() == wx.ID_OK:
            self.config.SetPath('/Perspective')
            self.config.DeleteEntry(dlg.GetStringSelection())
            self.config.Flush()
        dlg.Destroy()
        self.LoadPerspective()

    def OnViewToggleBar(self, event):
        pass

    def OnUpdateViewToggleBar(self, event):
        pass

    def OnViewStatusbar(self, event):
        pass

    def OnUpdateViewStatusbar(self, event):
        pass

    def OnToolsProperties(self, event):
        pass

    def OnPluginsManage(self, event):
        pass

    def OnHelpHome(self, event):
        wx.BeginBusyCursor()
        import webbrowser
        webbrowser.open("http://bsmedit.feiyilin.com")
        wx.EndBusyCursor() 

    def OnHelpContact(self, event):
        wx.BeginBusyCursor()
        import webbrowser
        webbrowser.open("mail:tianzhu.qiao@feiyilin.com")
        wx.EndBusyCursor()

    def OnHelpAbout(self, event):
        dlg = bsmAboutDialog(self)
        dlg.ShowModal()
        dlg.Destroy()

    def OnNewPythonScript(self, event):
        self.add_editor()

    def OnOpenPythonScript(self, event):
        defaultDir = os.path.dirname(os.getcwd())
        dlg = wx.FileDialog(self, 'Open',
                            wildcard='Python source (*.py)|*.py|Text (*.txt)|*.txt|All files (*.*)|*.*',
                            style=wx.OPEN | wx.FILE_MUST_EXIST)  # defaultDir  = defaultDir,
        if dlg.ShowModal() == wx.ID_OK:
            path = dlg.GetPaths()[0]
            wx.py.dispatcher.send(signal='bsm.editor.openfile', filename=path)

        dlg.Destroy()

    def onMenuFileHistory(self, event):
        fileNum = event.GetId() - wx.ID_FILE1
        path = self.filehistory.GetHistoryFile(fileNum)
        self.filehistory.AddFileToHistory(path)
        wx.py.dispatcher.send(signal='bsm.editor.openfile', filename=path)

    def initDebugger(self):
        self.addMenu('Tools:Debug', rxsignal='', kind='Popup')
        self.ID_DBG_RUN = self.addMenu('Tools:Debug:Run\tF5',
                rxsignal='debugger.resume',
                updatesignal='frame.updateui')
        self.ID_DBG_STOP = self.addMenu('Tools:Debug:Stop\tShift-F5',
                rxsignal='debugger.stop', updatesignal='frame.updateui')
        self.ID_DBG_STEP = self.addMenu('Tools:Debug:Step\tF10',
                rxsignal='debugger.step', updatesignal='frame.updateui')
        self.ID_DBG_STEP_INTO = \
            self.addMenu('Tools:Debug:Step Into\tF11',
                         rxsignal='debugger.stepinto',
                         updatesignal='frame.updateui')
        self.ID_DBG_STEP_OUT = \
            self.addMenu('Tools:Debug:Step Out\tShift-F11',
                         rxsignal='debugger.stepout',
                         updatesignal='frame.updateui')

        self.tbDebug = aui.AuiToolBar(self, wx.ID_ANY,
                wx.DefaultPosition, wx.DefaultSize, wx.TB_FLAT
                | wx.TB_HORIZONTAL)
        self.tbDebug.AddSimpleTool(self.ID_DBG_RUN, u'Run\tF5',
                wx.BitmapFromXPMData(arrow_xpm), u'Debug the script')
        self.tbDebug.AddSimpleTool(self.ID_DBG_STOP,
                u'Stop\tShift-F5',
                wx.BitmapFromXPMData(control_stop_square_xpm),
                u'Stop the debugger')
        self.tbDebug.AddSimpleTool(self.ID_DBG_STEP,
                u'Step\tF10',
                wx.BitmapFromXPMData(arrow_step_over_xpm), u'Step')
        self.tbDebug.AddSimpleTool(self.ID_DBG_STEP_INTO,
                u'Step Into\tF11',
                wx.BitmapFromXPMData(arrow_step_xpm), u'Step Into')
        self.tbDebug.AddSimpleTool(self.ID_DBG_STEP_OUT,
                u'Step Out\tShift-F11',
                wx.BitmapFromXPMData(arrow_step_out_xpm), u'Step Out')
        self.tbDebug.Realize()
        self.addPanel(self.tbDebug, 'Debugger', active = False,
                      paneInfo=aui.AuiPaneInfo().Name('debugger'
                      ).Caption('Debugger').ToolbarPane().Top(),
                      showhidemenu='View:Toolbars:Debugger')
        wx.py.dispatcher.connect(receiver=self.OnUpdateUI,
                                 signal='frame.updateui')
        wx.py.dispatcher.connect(self.debug_paused, 'debugger.paused')
        wx.py.dispatcher.connect(self.debug_ended, 'debugger.ended')
        self.SetExtraStyle(wx.WS_EX_PROCESS_UI_UPDATES)

    def debug_paused(self, data):
        if data is None:
            return
        status = data[3]
        self.tbDebug.EnableTool(self.ID_DBG_RUN, True)
        self.tbDebug.EnableTool(self.ID_DBG_STOP, True)
        self.tbDebug.EnableTool(self.ID_DBG_STEP, True)
        self.tbDebug.EnableTool(self.ID_DBG_STEP_INTO, status[0])
        self.tbDebug.EnableTool(self.ID_DBG_STEP_OUT, status[1])
        self.tbDebug.Refresh(False)

    def debug_ended(self):
        self.tbDebug.EnableTool(self.ID_DBG_RUN, False)
        self.tbDebug.EnableTool(self.ID_DBG_STOP, False)
        self.tbDebug.EnableTool(self.ID_DBG_STEP, False)
        self.tbDebug.EnableTool(self.ID_DBG_STEP_INTO, False)
        self.tbDebug.EnableTool(self.ID_DBG_STEP_OUT, False)
        self.tbDebug.Refresh(False)
        self.showPanel(self.tbDebug, False)

    def OnUpdateUI(self, event):
        eid = event.GetId()
        bPaused = self.panelShell.debugger._paused
        bEnable = False
        if eid == self.ID_DBG_RUN:
            bEnable = bPaused
        elif eid == self.ID_DBG_STOP:
            bEnable = bPaused
        elif eid == self.ID_DBG_STEP:
            bEnable = bPaused
        elif eid == self.ID_DBG_STEP_INTO:
            bEnable = bPaused and self.panelShell.debugger._can_stepin
        elif eid == self.ID_DBG_STEP_OUT:
            bEnable = bPaused and self.panelShell.debugger._can_stepout
        event.Enable(bEnable)
        
class bsmAboutDialog(bsm_dlg_helper.dlgAbout):
    def __init__(self, parent):
        bsm_dlg_helper.dlgAbout.__init__(self, parent)
        self.m_bitmap.SetBitmap(wx.BitmapFromXPMData(header_xpm))
        self.m_stTitle.SetLabel('BSMEdit %s.%s'%(BSM_VERSION_MAJOR, BSM_VERSION_MIDDLE))
        today = date.today()
        self.m_stVersion.SetLabel(' Build %s' % (BSM_VERSION_MINOR))
        self.m_stCopyright.SetLabel('(c) 2008-%i %s' % (today.year,
                                    'Tianzhu Qiao. All rights reserved.'
                                    ))

        strBuild = wx.GetOsDescription() + '; wxWidgets ' + wx.version()
        self.m_stBuildinfo.SetLabel(strBuild)
        self.m_stBuildinfo.Wrap(256 - 30)
        self.m_panel.Fit()
        self.Fit()


class DirPanel(wx.Panel):

    ID_GOTO_PARENT = wx.NewId()
    ID_GOTO_HOME = wx.NewId()

    def __init__(self, parent):
        wx.Panel.__init__(self, parent)

        self.tb = wx.ToolBar(self, wx.ID_ANY, wx.DefaultPosition,
                             wx.DefaultSize, wx.TB_FLAT
                             | wx.TB_HORIZONTAL)
        self.tb.AddLabelTool(
            self.ID_GOTO_PARENT,
            u'Parent',
            wx.BitmapFromXPMData(arrow_090_xpm),
            wx.NullBitmap,
            wx.ITEM_NORMAL,
            u'Parent folder',
            wx.EmptyString,
            )
        self.tb.AddLabelTool(
            self.ID_GOTO_HOME,
            u'Home',
            wx.BitmapFromXPMData(home_xpm),
            wx.NullBitmap,
            wx.ITEM_NORMAL,
            u'Current folder',
            wx.EmptyString,
            )
        self.tb.Realize()
        self.dirtree = DirTreeCtrl.DirTreeCtrl(self,
                style=wx.TR_DEFAULT_STYLE
                | wx.TR_HAS_VARIABLE_ROW_HEIGHT | wx.TR_HIDE_ROOT)
        self.dirtree.SetRootDir(os.getcwd())
        self.box = wx.BoxSizer(wx.VERTICAL)
        self.box.Add(self.tb, 0, wx.EXPAND, 5)
        self.box.Add(wx.StaticLine(self), 0, wx.EXPAND)
        self.box.Add(self.dirtree, 1, wx.EXPAND)

        self.box.Fit(self)
        self.SetSizer(self.box)

        self.Bind(wx.EVT_TOOL, self.OnGotoHome, id=self.ID_GOTO_HOME)
        self.Bind(wx.EVT_TOOL, self.OnGotoParent,
                  id=self.ID_GOTO_PARENT)

        self.Bind(wx.EVT_TREE_ITEM_ACTIVATED, self.OnItemActivated,
                  self.dirtree)

    def OnItemActivated(self, event):
        currentItem = event.GetItem()
        filename = self.dirtree.GetItemText(currentItem)
        parentItem = self.dirtree.GetItemParent(currentItem)
        if type(self.dirtree.GetPyData(parentItem)) \
            == type(DirTreeCtrl.Directory()):
            d = self.dirtree.GetPyData(parentItem)
            filepath = os.path.join(d.directory, filename)
        else:
            return
        if self.dirtree.ItemHasChildren(currentItem):
            self.dirtree.SetRootDir(filepath)
            return
        (path, fileExtension) = os.path.splitext(filename)
        if fileExtension == '.py':
            wx.py.dispatcher.send(signal='bsm.editor.openfile', 
                    filename=filepath)
        else:
            os.system("start "+ filepath)

    def OnGotoHome(self, event):
        root = self.dirtree.GetRootItem()
        if root and type(self.dirtree.GetPyData(root)) \
            == type(DirTreeCtrl.Directory()):
            d = self.dirtree.GetPyData(root)
            if d.directory == os.getcwd():
                return
        self.dirtree.SetRootDir(os.getcwd())

    def OnGotoParent(self, event):
        root = self.dirtree.GetRootItem()
        if root and type(self.dirtree.GetPyData(root)) \
            == type(DirTreeCtrl.Directory()):
            d = self.dirtree.GetPyData(root)
            path = os.path.abspath(os.path.join(d.directory,
                                   os.path.pardir))
            if path == d.directory:
                return
            self.dirtree.SetRootDir(path)

